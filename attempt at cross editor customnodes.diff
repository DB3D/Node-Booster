
#  Why this attempt failed:
# 
#  Cross compatibility of sockettype between GeometryNode and the Shader/Compositor trees are not possible
#  ng.interface.new_socket(socket_type) will not match most of the sockets. 
#  I believe the wisest thing to do is to wait at least a year, see what's up. Perhaps blender devs will announce a plan for node uniformity sooner or later.
#
#  Perhaps we could simply ignore the sockettype not yet available per nodes? 
#  Then we'll also need to stop using set_socket_defvalue() by index, and use names instead.


diff --git a/customnodes/__init__.py b/customnodes/__init__.py
index 4520574..79daae3 100644
--- a/customnodes/__init__.py
+++ b/customnodes/__init__.py
@@ -3,7 +3,7 @@
 # SPDX-License-Identifier: GPL-2.0-or-later
 
 
-from . camerainfo import NODEBOOSTER_NG_camerainfo
+from . camerainfo import NODEBOOSTER_NG_GN_CameraInfo, NODEBOOSTER_NG_SH_CameraInfo
 from . lightinfo import NODEBOOSTER_NG_lightinfo
 from . sceneinfo import NODEBOOSTER_NG_sceneinfo
 from . renderinfo import NODEBOOSTER_NG_renderinfo
@@ -13,18 +13,32 @@ from . mathexpression import NODEBOOSTER_NG_mathexpression
 from . pyexpression import NODEBOOSTER_NG_pyexpression
 from . pynexscript import NODEBOOSTER_NG_pynexscript
 
+#For menus, in order of appearance
+GN_CustomNodes = (
+    NODEBOOSTER_NG_lightinfo,
+    NODEBOOSTER_NG_sceneinfo,
+    NODEBOOSTER_NG_renderinfo,
+    NODEBOOSTER_NG_GN_CameraInfo,
+    NODEBOOSTER_NG_isrenderedview,
+    NODEBOOSTER_NG_sequencervolume,
+    NODEBOOSTER_NG_mathexpression,
+    NODEBOOSTER_NG_pyexpression,
+    NODEBOOSTER_NG_pynexscript,
+    )
+SH_CustomNodes = (
+    NODEBOOSTER_NG_SH_CameraInfo,
+    )
 
-#NOTE order here will be order of appearance in the shift+a add menu
+#for registration
 classes = (
-
     NODEBOOSTER_NG_lightinfo,
     NODEBOOSTER_NG_sceneinfo,
     NODEBOOSTER_NG_renderinfo,
-    NODEBOOSTER_NG_camerainfo,
+    NODEBOOSTER_NG_GN_CameraInfo,
+    NODEBOOSTER_NG_SH_CameraInfo,
     NODEBOOSTER_NG_isrenderedview,
     NODEBOOSTER_NG_sequencervolume,
     NODEBOOSTER_NG_mathexpression,
     NODEBOOSTER_NG_pyexpression,
     NODEBOOSTER_NG_pynexscript,
-
     )
diff --git a/customnodes/camerainfo.py b/customnodes/camerainfo.py
index 679f63b..c6aeb71 100644
--- a/customnodes/camerainfo.py
+++ b/customnodes/camerainfo.py
@@ -7,15 +7,17 @@ import bpy
 
 from ..__init__ import get_addon_prefs
 from ..utils.str_utils import word_wrap
-from ..utils.node_utils import create_new_nodegroup, set_socket_defvalue
+from ..utils.node_utils import create_new_nodegroup, set_socket_defvalue, get_all_nodes
 
 
-class NODEBOOSTER_NG_camerainfo(bpy.types.GeometryNodeCustomGroup):
-    """Custom Nodgroup: Gather informations about any camera.
+class Base():
+
+    __desc__  = """Custom Nodgroup: Gather informations about any camera.
     • By default the camera will always use the active camera.
     • Expect updates on each depsgraph post and frame_pre update signals"""
 
-    bl_idname = "GeometryNodeNodeBoosterCameraInfoV2"
+    tree_type = "ChildrenDefined"
+    bl_idname = "ChildrenDefined"
     bl_label = "Camera Info"
 
     use_scene_cam: bpy.props.BoolProperty(
@@ -45,6 +47,7 @@ class NODEBOOSTER_NG_camerainfo(bpy.types.GeometryNodeCustomGroup):
         ng = bpy.data.node_groups.get(name)
         if (ng is None):
             ng = create_new_nodegroup(name,
+                tree_type=self.tree_type,
                 out_sockets={
                     "Camera Object" : "NodeSocketObject",
                     "Field of View" : "NodeSocketFloat",
@@ -55,8 +58,8 @@ class NODEBOOSTER_NG_camerainfo(bpy.types.GeometryNodeCustomGroup):
                     "Sensor Type" : "NodeSocketString",
                     "Sensor Width" : "NodeSocketFloat",
                     "Sensor Height" : "NodeSocketFloat",
-                },
-            )
+                    },
+                )
 
         ng = ng.copy() #always using a copy of the original ng
         
@@ -120,13 +123,24 @@ class NODEBOOSTER_NG_camerainfo(bpy.types.GeometryNodeCustomGroup):
         row.prop(self, "use_scene_cam", text="", icon="SCENE_DATA")
 
         return None
-        
+
     @classmethod
     def update_all_instances(cls, from_depsgraph=False,):
         """search for all nodes of this type and update them"""
-        
-        all_instances = [n for ng in bpy.data.node_groups for n in ng.nodes if (n.bl_idname==cls.bl_idname)]
-        for n in all_instances:
+
+        #TODO we call update_all_instances for a lot of nodes from depsgraph & we need to optimize this, because func below may recur a LOT of nodes
+        # could pass a from_nodes arg in this function
+        for n in get_all_nodes(geometry=True, compositing=True, shader=True, ignore_ng_name="NodeBooster", match_idnames={cls.bl_idname},): 
             n.update()
-            
+
         return None 
+
+#Per Node-Editor Children:
+
+class NODEBOOSTER_NG_GN_CameraInfo(Base, bpy.types.GeometryNodeCustomGroup):
+    bl_idname = "GeometryNodeNodeBoosterCameraInfoV2"
+    tree_type = "GeometryNodeTree"
+
+class NODEBOOSTER_NG_SH_CameraInfo(Base, bpy.types.ShaderNodeCustomGroup):
+    bl_idname = "ShaderNodeNodeBoosterCameraInfoV2"
+    tree_type = "ShaderNodeTree"
\ No newline at end of file
diff --git a/handlers.py b/handlers.py
index 27eac4d..051cb18 100644
--- a/handlers.py
+++ b/handlers.py
@@ -13,7 +13,7 @@ from .customnodes import (
     NODEBOOSTER_NG_lightinfo,
     NODEBOOSTER_NG_sceneinfo,
     NODEBOOSTER_NG_renderinfo,
-    NODEBOOSTER_NG_camerainfo,
+    NODEBOOSTER_NG_GN_CameraInfo,
     NODEBOOSTER_NG_pyexpression,
     NODEBOOSTER_NG_sequencervolume,
     NODEBOOSTER_NG_isrenderedview,
@@ -85,7 +85,7 @@ def nodebooster_handler_depspost(scene,desp):
     NODEBOOSTER_NG_lightinfo.update_all_instances(from_depsgraph=True)
     NODEBOOSTER_NG_sceneinfo.update_all_instances(from_depsgraph=True)
     NODEBOOSTER_NG_renderinfo.update_all_instances(from_depsgraph=True)
-    NODEBOOSTER_NG_camerainfo.update_all_instances(from_depsgraph=True)
+    NODEBOOSTER_NG_GN_CameraInfo.update_all_instances(from_depsgraph=True)
     NODEBOOSTER_NG_sequencervolume.update_all_instances(from_depsgraph=True)
 
     #automatic re-evaluation of the Python Expression and Python Nex Nodes.
@@ -111,7 +111,7 @@ def nodebooster_handler_framepre(scene,desp):
     NODEBOOSTER_NG_lightinfo.update_all_instances(from_depsgraph=True)
     NODEBOOSTER_NG_sceneinfo.update_all_instances(from_depsgraph=True)
     NODEBOOSTER_NG_renderinfo.update_all_instances(from_depsgraph=True)
-    NODEBOOSTER_NG_camerainfo.update_all_instances(from_depsgraph=True)
+    NODEBOOSTER_NG_GN_CameraInfo.update_all_instances(from_depsgraph=True)
     NODEBOOSTER_NG_sequencervolume.update_all_instances(from_depsgraph=True)
 
     #automatic re-evaluation of the Python Expression and Python Nex Nodes.
diff --git a/ui/menus.py b/ui/menus.py
index fd48dd2..aca2d58 100644
--- a/ui/menus.py
+++ b/ui/menus.py
@@ -7,7 +7,7 @@ import bpy
 
 import os
 
-from ..customnodes import classes as NODECUSTOMCLS
+from ..customnodes import GN_CustomNodes, SH_CustomNodes
 
 
 class NODEBOOSTER_MT_addmenu_general(bpy.types.Menu):
@@ -17,31 +17,31 @@ class NODEBOOSTER_MT_addmenu_general(bpy.types.Menu):
 
     @classmethod
     def poll(cls, context):
-        return (bpy.context.space_data.tree_type == 'GeometryNodeTree')
+        return (context.space_data.tree_type in {'GeometryNodeTree','ShaderNodeTree'})
 
     def draw(self, context):
 
-        for cls in NODECUSTOMCLS:
-            if ('_NG_' in cls.__name__):
+        MenuContent = {
+            'GeometryNodeTree': GN_CustomNodes,
+            'ShaderNodeTree': SH_CustomNodes,
+            }
+        for cls in MenuContent[context.space_data.tree_type]:
+            if cls.__name__.startswith('NODEBOOSTER_NG_'):
                 op = self.layout.operator("node.add_node", text=cls.bl_label,)
                 op.type = cls.bl_idname
                 op.use_transform = True
+            continue
 
         return None
 
-
 def nodebooster_addmenu_append(self, context,):
-
     self.layout.menu("NODEBOOSTER_MT_addmenu_general", text="Booster Nodes",)
-
     return None 
 
 def nodebooster_nodemenu_append(self, context):
-
     layout = self.layout 
     layout.separator()
     layout.operator("nodebooster.node_purge_unused", text="Purge Unused Nodes",)
-
     return None
 
 
@@ -73,18 +73,17 @@ def nodebooster_templatemenu_append(self, context):
     return None
 
 
-MENUS = [
+MENUS = (
     bpy.types.NODE_MT_add,
     bpy.types.NODE_MT_node,
     bpy.types.TEXT_MT_templates,
-    ]
-
+    )
 
-DRAWFUNCS = [
+DRAWFUNCS = (
     nodebooster_addmenu_append,
     nodebooster_nodemenu_append,
     nodebooster_templatemenu_append,
-    ]
+    )
 
 
 def append_menus():
